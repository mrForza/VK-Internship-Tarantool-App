{
	"info": {
		"_postman_id": "a9f30c4e-4d24-4403-a2b5-912ed1e0aed2",
		"name": "VK Internship Integration Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json",
		"_exporter_id": "28233508"
	},
	"item": [
		{
			"name": "Authorization Service Tests",
			"item": [
				{
					"name": "Registration Tests",
					"item": [
						{
							"name": "Login Tests",
							"item": [
								{
									"name": "Incorrect login: so small",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect login: the length should be no less than 2 symbols\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"q\",\r\n    \"password\": \"Correct_Passw00rd123(&)^(\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect login: so huge",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect login: the length should be no more than 64 symbols\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"BIG1LOGIN1MORE1THAN64SYMBOLSBIG1LOGIN1MORE1THAN64SYMBOLSBIG1LOGIN1MORE1THAN64SYMBOL\",\r\n    \"password\": \"Correct7689F)*234\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect login: bad symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect login: login should have onlu lower-upper latin letters and digits\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"SpecialSymbols+!@#_)\",\r\n    \"password\": \"Correct7689F)*234\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "Password Tests",
							"item": [
								{
									"name": "Incorrect password: so small",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect password: the length should be no less than 8 symbols\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"GoodLogin123\",\r\n    \"password\": \"short\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect password: so huge",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect password: the length should be no more than 64 symbols\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"GoodLogin123\",\r\n    \"password\": \"bigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbigbig\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect password: no lower case letters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect password: the password should have at least one LOWER_CASE\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"GoodLogin123\",\r\n    \"password\": \"NO_LOWER_CASE_LETTERS_123\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect password: no upper case letters",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect password: the password should have at least one UPPER_CASE\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"GoodLogin123\",\r\n    \"password\": \"no_upper_case_lettes_123\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect password: no special symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect password: the password should have at least one SPECIAL_SYMBOLS\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"GoodLogin123\",\r\n    \"password\": \"No1Special1Symbols\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect password: no digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect password: the password should have at least one DIGITS\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"GoodLogin123\",\r\n    \"password\": \"No_Digits\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "Initials Tests",
							"item": [
								{
									"name": "Incorrect initial: so small",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect initial: the length should be no less than 2 symbols\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"CorrectLogin123\",\r\n    \"password\": \"Correct7689F)*234\",\r\n    \"name\": \"a\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect initial: so huge",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect initial: the length should be no more than 32 symbols\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"CorrectLogin123\",\r\n    \"password\": \"Correct7689F)*234\",\r\n    \"name\": \"qweqweqweqweqweqweqweqweqweqweqweqweqweqweqwe\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect initial: with digits",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect initial: initial should have only lower-upper latin letters\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"CorrectLogin123\",\r\n    \"password\": \"Correct7689F)*234\",\r\n    \"name\": \"Roman123\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect initial: with special symbols",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 400\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"Incorrect initial: initial should have only lower-upper latin letters\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"login\": \"CorrectLogin123\",\r\n    \"password\": \"Correct7689F)*234\",\r\n    \"name\": \"----\",\r\n    \"surname\": \"Gromov\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "Correct registration",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You have been successfully registered!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"CorrectLogin123\",\r\n    \"password\": \"Correct_Passw00rd123(&)^(\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
							},
							"response": []
						},
						{
							"name": "Incorrect registration: user already exists",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"user with this login is already exists\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"CorrectLogin123\",\r\n    \"password\": \"Correct_Passw00rd123(&)^(\",\r\n    \"name\": \"Roman\",\r\n    \"surname\": \"Gromov\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{REGISTRATION_PATH}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Authentication Tests",
					"item": [
						{
							"name": "Correct authentication",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"token\": {\"type\": \"string\"},\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"token\", \"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You have been successfully authenticated\");\r",
											"});\r",
											"\r",
											"const jsonData =pm.response.json()\r",
											"pm.environment.set(\r",
											"    \"JWT_TOKEN\",\r",
											"    jsonData['token']\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"CorrectLogin123\",\r\n    \"password\": \"Correct_Passw00rd123(&)^(\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{AUTHENTICATION_PATH}}"
							},
							"response": []
						},
						{
							"name": "Incorrect authentication: bad login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"token\": {\"type\": \"string\"},\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"token\", \"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"-\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You have entered an incorrect login or password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"BadLogin123\",\r\n    \"password\": \"Correct_Passw00rd123(&)^(\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{AUTHENTICATION_PATH}}"
							},
							"response": []
						},
						{
							"name": "Incorrect authentication: bad password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 404\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"token\": {\"type\": \"string\"},\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"token\", \"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"-\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You have entered an incorrect login or password\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"CorrectLogin123\",\r\n    \"password\": \"Bad_Passw00rd123(&)^(\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{AUTHENTICATION_PATH}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "Logout Tests",
					"item": [
						{
							"name": "Correct logout",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\r",
											"        \"You have been successfully logout from your account! Please, remove a jwt token from your Authorization Headers) I'm so lazy to do it)\");\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.environment.set(\r",
											"    \"JWT_TOKEN\",\r",
											"    \"\"\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{JWT_TOKEN}}"
									}
								},
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{LOGOUT_PATH}}"
							},
							"response": []
						},
						{
							"name": "Incorrect logout: no token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You have not been authorized!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "GET",
								"header": [],
								"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{LOGOUT_PATH}}"
							},
							"response": []
						},
						{
							"name": "Incorrect logout: invalid token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 401\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"You have not been authorized!\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "2gui2gu2hg3g34igi34guh3u4gih3i4guh3i4ugh3iu4ghiu34hgiu34hgi3u4gh3i4ugh_incorrect_token"
									}
								},
								"method": "GET",
								"header": [],
								"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{LOGOUT_PATH}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "GetAllUsers Tests",
					"item": []
				},
				{
					"name": "GetYserByLogin Tests",
					"item": []
				},
				{
					"name": "GetProfile Tests",
					"item": []
				}
			]
		},
		{
			"name": "KeyValue Service Tests",
			"item": [
				{
					"name": "ReadKeyValues Tests",
					"item": [
						{
							"name": "Unauthorized Tests",
							"item": [
								{
									"name": "Incorrect read: no jwt token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"You are not authorized! Please, sign in or sign up\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"keys\": [\"some\", \"keys\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{KEY_VALUE_SERVICE_HOST}}/{{READ_KV_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect read: invalid jwt token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"You are not authorized! Please, sign in or sign up\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "tut23923ht923gh9234ghui34hgi34ough33g4_invalid_jwt_token"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"keys\": [\"some\", \"keys\"]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{KEY_VALUE_SERVICE_HOST}}/{{READ_KV_PATH}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "Authenticate NO TEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData =pm.response.json()\r",
											"pm.environment.set(\r",
											"    \"JWT_TOKEN\",\r",
											"    jsonData['token']\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"CorrectLogin123\",\r\n    \"password\": \"Correct_Passw00rd123(&)^(\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{AUTHENTICATION_PATH}}"
							},
							"response": []
						},
						{
							"name": "Write Data NO TEST",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{JWT_TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"Key - Value (int)\": 1,\r\n        \"Key - Value (string)\": \"Lorem ipsum doler sit amet\",\r\n        \"Key - Value (float)\": 3.14,\r\n        \"Key - Value (list)\": [\"a\", \"b\", \"c\"],\r\n        \"Key - Value (dict)\": {\r\n            \"1\": 1111111,\r\n            \"2\": 2222222,\r\n            \"0\": 0\r\n        },\r\n        \"Key - Value (large nesting)\": [\r\n            {\r\n                \"a\": {\r\n                    \"a2\": [1, 2, 3]\r\n                },\r\n                \"b\": [\r\n                    1,\r\n                    2,\r\n                    {\r\n                        \"q\": \"w\",\r\n                        \"e\": \"r\"\r\n                    }\r\n                ]\r\n            },\r\n            {\r\n                \"1\": [1, 2, 3],\r\n                \"2\": [4, 5, 6]\r\n            },\r\n            {\r\n                \"3\": {\r\n                    \"3.2\": 3.2,\r\n                    \"3.3.\": 3.3\r\n                }\r\n            }\r\n        ]\r\n    }   \r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{KEY_VALUE_SERVICE_HOST}}/{{WRITE_KV_PATH}}"
							},
							"response": []
						},
						{
							"name": "Incorrect read: no keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Incorrect keys: you have not passed any keys\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{JWT_TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"keys\": []\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{KEY_VALUE_SERVICE_HOST}}/{{READ_KV_PATH}}"
							},
							"response": []
						},
						{
							"name": "Incorrect read: duplicated keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Incorrect keys: you cannot pass identical keys:\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{JWT_TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"keys\": [\"key1\", \"key1\", \"key1\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{KEY_VALUE_SERVICE_HOST}}/{{READ_KV_PATH}}"
							},
							"response": []
						},
						{
							"name": "Incorrect read: not existing key",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"These keys don't exist:\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{JWT_TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"keys\": [\"key1\", \"key2\"]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{KEY_VALUE_SERVICE_HOST}}/{{READ_KV_PATH}}"
							},
							"response": []
						},
						{
							"name": "Correct read",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Lorem ipsum doler sit amet\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1\");\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"1111111\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{JWT_TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"keys\": [\r\n        \"Key - Value (int)\",\r\n        \"Key - Value (string)\",\r\n        \"Key - Value (float)\",\r\n        \"Key - Value (list)\",\r\n        \"Key - Value (dict)\",\r\n        \"Key - Value (large nesting)\"\r\n    ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{KEY_VALUE_SERVICE_HOST}}/{{READ_KV_PATH}}"
							},
							"response": []
						}
					]
				},
				{
					"name": "WriteKeyValues Tests",
					"item": [
						{
							"name": "Unauthorized Tests Copy",
							"item": [
								{
									"name": "Incorrect write: no jwt token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"You are not authorized! Please, sign in or sign up\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": {\r\n        \"key1\": \"value1\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{KEY_VALUE_SERVICE_HOST}}/{{WRITE_KV_PATH}}"
									},
									"response": []
								},
								{
									"name": "Incorrect write: invalid jwt token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Статус код должен быть 401\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"\r",
													"const responseSchema = {\r",
													"    \"type\": \"object\",\r",
													"    \"properties\":{\r",
													"        \"message\": {\"type\": \"string\"},\r",
													"    },\r",
													"    \"required\": [\"message\"],\r",
													"    \"additionalProperties\": false\r",
													"};\r",
													"\r",
													"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
													"    pm.response.to.have.jsonSchema(responseSchema);\r",
													"});\r",
													"\r",
													"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"You are not authorized! Please, sign in or sign up\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": {
												"token": "tut23923ht923gh9234ghui34hgi34ough33g4_invalid_jwt_token"
											}
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"data\": {\r\n        \"key1\": \"value1\"\r\n    }\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": "{{KEY_VALUE_SERVICE_HOST}}/{{WRITE_KV_PATH}}"
									},
									"response": []
								}
							]
						},
						{
							"name": "Authenticate NO TEST",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"const jsonData =pm.response.json()\r",
											"pm.environment.set(\r",
											"    \"JWT_TOKEN\",\r",
											"    jsonData['token']\r",
											");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"login\": \"CorrectLogin123\",\r\n    \"password\": \"Correct_Passw00rd123(&)^(\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{AUTHORIZATION_SERVICE_HOST}}/{{AUTHENTICATION_PATH}}"
							},
							"response": []
						},
						{
							"name": "Incorrect write: no keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"message\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"message\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"Ответ должен содержать данное сообщение об ошибке\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"Incorrect keys: you have not passed any keys\");\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{JWT_TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{KEY_VALUE_SERVICE_HOST}}/{{WRITE_KV_PATH}}"
							},
							"response": []
						},
						{
							"name": "Incorrect write: duplicated keys",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"status\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"status\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"JSON по дефолту удаляет повторяющиеся ключи\", function () {\r",
											"    true\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{JWT_TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"key1\": 1,\r\n        \"key1\": 3\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{KEY_VALUE_SERVICE_HOST}}/{{WRITE_KV_PATH}}"
							},
							"response": []
						},
						{
							"name": "Correct write",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Статус код должен быть 201\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"\r",
											"const responseSchema = {\r",
											"    \"type\": \"object\",\r",
											"    \"properties\":{\r",
											"        \"status\": {\"type\": \"string\"},\r",
											"    },\r",
											"    \"required\": [\"status\"],\r",
											"    \"additionalProperties\": false\r",
											"};\r",
											"\r",
											"pm.test('Структура ответа должна соответствовать ожидаемой', function () {\r",
											"    pm.response.to.have.jsonSchema(responseSchema);\r",
											"});\r",
											"\r",
											"pm.test(\"JSON по дефолту удаляет повторяющиеся ключи\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": {
										"token": "{{JWT_TOKEN}}"
									}
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"data\": {\r\n        \"alphabet\": [\r\n            \"a\",\r\n            \"b\",\r\n            \".\",\r\n            \".\",\r\n            \".\",\r\n            \"z\"\r\n        ],\r\n        \"numbers_and_hexes\": {\r\n            \"123\": \"7B\",\r\n            \"777\": \"309\",\r\n            \"1238\": \"4D6\",\r\n            \"805\": \"325\",\r\n            \"786487654\": \"2EE0D966\"\r\n        },\r\n        \"nested_key\": {\r\n            \"a\": {\r\n                \"1\": [\r\n                    {\r\n                        \"a\": \"b\"\r\n                    }\r\n                ],\r\n                \"2\": {\r\n                  \"1\": \"2\"  \r\n                },\r\n                \"3\": 1.123495\r\n            },\r\n            \"b\": {\r\n                \"lorem\": \"ipsum\"\r\n            }\r\n        }\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{KEY_VALUE_SERVICE_HOST}}/{{WRITE_KV_PATH}}"
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"variable": [
		{
			"key": "JWT_TOKEN",
			"value": ""
		}
	]
}